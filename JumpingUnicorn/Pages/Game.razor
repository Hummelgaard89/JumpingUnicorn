@page "/Game"
@using Microsoft.AspNetCore.Components.Web
@using JumpingUnicorn.Data
@using JumpingUnicorn.Obstacles
@using JumpingUnicorn.GameHandeling

@inject AvatarService avatarServiceHelper
@inject ObstacleHandler obstacleHelper
@inject GameHandler gameHelper
@attribute [Authorize("UsernameSet")]
@inject IHttpContextAccessor httpContextAccessor;
@inject IJSRuntime JSRT;
@inject NavigationManager uriHelper;


<PageTitle>Game</PageTitle>
<button class="GameBackground">
    <div class="GameRainbow">
        <img id="GameAvatar" src="@avatarPath" />
        <img id="Obstacle1" src="@obstacleHelper.obstaclePath" />
        <div>@gameScore</div>
    </div>
</button>

@code {
    bool isJumping = false;
    public static double avatarBottomHeight = 8;
    public static MarkupString gameScore = new MarkupString();
    public static MarkupString avatarPath = new MarkupString();
    private IJSObjectReference? jsModule;
    private DotNetObjectReference<Game> objRef;

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
        obstacleHelper.objRefGame = this;
        gameHelper.objRefGame = this;
        obstacleHelper.InitializeObstacleHandler();
    }

    protected override async Task OnAfterRenderAsync(bool firstRendering)
    {
        if (firstRendering)
        {
            jsModule = await JSRT.InvokeAsync<IJSObjectReference>("import", "./Pages/Game.razor.js");
            await JSRT.InvokeVoidAsync("instantiateListeners", objRef);
            obstacleHelper.OnAfterRenderingObstaleHandler();
            obstacleHelper.StartThread();
            gameHelper.StartThread();
        }
        await base.OnAfterRenderAsync(firstRendering);
    }

    //Method that gets the input from clientside keyboard and mouse via javascript function.
    [JSInvokable]
    public void ReturnKeystroke(Object keystroke)
    {
        Console.WriteLine(keystroke.ToString());
        if ((keystroke.ToString() == "Keyboard:38" || keystroke.ToString() == "Mouse:1") && isJumping == false)
        {
            Console.WriteLine("The fluffy little unicorn is jumping");
            Jump();
        }
        else if ((keystroke.ToString() == "Keyboard:38" || keystroke.ToString() == "Mouse:1") && isJumping == true)
        {
            Console.WriteLine("The fluffy little unicorn is already jumping");
        }
        else
        {
            Console.WriteLine("YOOOU SHAL NOT PAAAAAAAASS!!!!!!!!!");
        }
    }

    //To re-render.
    public void UpdateState()
    {
        InvokeAsync(() => { StateHasChanged(); });
    }

    //Method for jumping with the avatar.
    public async void Jump()
    {
        isJumping = true;
        while (avatarBottomHeight < 40)
        {
            avatarBottomHeight = Math.Round(avatarBottomHeight + 1, MidpointRounding.AwayFromZero);
            await jsModule.InvokeVoidAsync("ChangeAvatarBottom", avatarBottomHeight.ToString().Replace(",", "."));
            await Task.Delay(10);
        }
        while (avatarBottomHeight > 8)
        {
            avatarBottomHeight = Math.Round(avatarBottomHeight - 1, MidpointRounding.AwayFromZero);
            await jsModule.InvokeVoidAsync("ChangeAvatarBottom", avatarBottomHeight.ToString().Replace(",", "."));
            await Task.Delay(10);
        }
        isJumping = false;
    }
}
